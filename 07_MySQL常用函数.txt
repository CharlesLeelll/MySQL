Mysql中常用的函数
函数表示对输入参数值返回一个具有特定关系的值。
mysql函数主要分为以下几类：
数学函数 字符串函数 日期和时间函数 条件判断函数 系统信息函数 和加密函数 等其他函数

数学函数：
绝对值函数，三角函数，对数函数，随机函数，在有错误时返回null

【例6.1】求2，-3.3和-33的绝对值，SQL语句如下：
SELECT ABS(2), ABS(-3.3), ABS(-33);

PI()返回圆周率的值默认显示小数位数是六位
【例6.2】返回圆周率值，SQL语句如下：
SELECT pi();

平方根函数sqrt（x）和求余函数mod（x,y）
【例6.3】求9，40和-49的二次平方根，SQL语句如下：
SELECT SQRT(9), SQRT(40), SQRT(-49);

【例6.4】对MOD(31,8)，MOD(234, 10)，MOD(45.5,6)进行求余运算，SQL语句如下：
SELECT MOD(31,8),MOD(234, 10),MOD(45.5,6);

获取整数的函数ceil(x) ceiling(x) 和floor（x）
ceil（x）和ceiling(x)意义相同，返回x邻近的最大整数数值，返回值转化为一个bigint
【例6.5】使用CEILING函数返回最大整数，SQL语句如下：
SELECT  CEIL(-3.35),CEILING(3.35);

FLOOR函数返回最小整数
【例6.6】使用FLOOR函数返回最小整数，SQL语句如下：
SELECT FLOOR(-3.35), FLOOR(3.35);

获取随机数的函数rand() 和rand（x）

rand()返回一个随机浮点v，范围在0~1之间（即0<=v<=1.0）
例6.7】使用RAND()函数产生随机数，SQL语句如下：
SELECT RAND(),RAND(),RAND();

若是指定一个x则他被作为种子值，用来产生重复序列
【例6.8】使用RAND(x)函数产生随机数，SQL语句如下：
SELECT RAND(10),RAND(10),RAND(11);
备注：所谓重复序列即产生的值相等，即rand(10) 和rand（10）产生的随机值相等

四舍五入的函数round（x）返回最接近x的整数，对x进行四舍五入
【例6.9】使用ROUND(x)函数对操作数进行四舍五入操作，SQL语句如下： 
SELECT ROUND(-1.14),ROUND(-1.67), ROUND(1.14),ROUND(1.66);

ROUND(x,y)函数对操作数进行四舍五入操作，结果保留小数点后面指定y位
y为负数时，保留的小数点左边相应的位数直接保存为0
【例6.10】使用ROUND(x,y)函数对操作数进行四舍五入操作，结果保留小数点后面指定y位，SQL语句如下：
SELECT ROUND(1.38, 1), ROUND(1.38, 0), ROUND(232.38, -1), round(232.38,-2);
 
TRUNCATE(x,y)函数对操作数进行四舍五入操作，结果保留小数点后面指定y位，y位之后均化为0
y为负数则 x小数点左起第y位开始后面所有值都化为0
【例6.11】使用TRUNCATE(x,y)函数对操作数进行四舍五入操作，结果保留小数点后面指定y位，SQL语句如下：
SELECT TRUNCATE(1.31,1), TRUNCATE(1.99,1), TRUNCATE(1.99,0), TRUNCATE(19.99,-1);


　　　　　　　　　　　　　　　　字符串函数
CHAR_LENGTH函数计算字符串字符个数

【例6.26】使用CHAR_LENGTH函数计算字符串字符个数，SQL语句如下：
SELECT CHAR_LENGTH('date'), CHAR_LENGTH('egg');

LENGTH函数计算字符串长度
【例6.27】使用LENGTH函数计算字符串长度，SQL语句如下：
SELECT LENGTH('date'), LENGTH('egg');

CONCAT函数连接字符串
【例6.28】使用CONCAT函数连接字符串，SQL语句如下：
SELECT CONCAT('My SQL', '5.5'),CONCAT('My',NULL, 'SQL');
备注：一个参数为null返回结果为null
CONCAT_WS函数连接带分隔符的字符串concat_ws(x,s1,s2) x代表分割符，分割符为null返回null
【例6.29】使用CONCAT_WS函数连接带分隔符的字符串，SQL语句如下：
SELECT CONCAT_WS('-', '1st','2nd', '3rd'), CONCAT_WS('*', '1st', NULL, '3rd');

LOWER函数或者LCASE函数将字符串中所有字母字符转换为小写
【例6.31】使用LOWER函数或者LCASE函数将字符串中所有字母字符转换为小写，SQL语句如下：
SELECT LOWER('BEAUTIFUL'), LCASE('Well');

UPPER函数或者UCASE函数将字符串中所有字母字符转换为大写
【例6.32】使用UPPER函数或者UCASE函数将字符串中所有字母字符转换为大写，SQL语句如下：
SELECT UPPER('black'), UCASE('BLacK');
LEFT函数返回字符串中左边的字符left(s,n)返回字符串s最左边的n个字符
【例6.33】使用LEFT函数返回字符串中左边的字符，SQL语句如下：
SELECT LEFT('football', 5);  注意 若超过字符串长度，系统以空格返回超过部分，以第一个字母为起点，若n为负，则返回空格。
RIGHT函数返回字符串中右边的字符   
【例6.34】使用RIGHT函数返回字符串中右边的字符，SQL语句如下：
SELECT RIGHT('football', 4);

删除空格的函数
【例6.37】使用LTRIM函数删除字符串左边的空格，SQL语句如下：
SELECT '(  book  )',CONCAT('(',LTRIM('  book  '),')');
备注：concat连接字符串CONCAT('(',LTRIM('  book  '),')连接了两个括号
【例6.38】SELECT CONCAT( '(',  RTRIM ('  book  '), ')');
SELECT '(  book  )',CONCAT('(', RTRIM ('  book  '),')');

【例6.39】SELECT CONCAT( '(',  TRIM('  book  ') , ')');
SELECT '(  book  )',CONCAT('(', TRIM('  book  '),')');

TRIM(s1 FROM s)函数删除字符串s中两端含有的字符串s1（若不含，返回原字符串），s1可选，未指定删除空格
【例6.40】使用TRIM(s1 FROM s)函数删除字符串中两端指定的字符，SQL语句如下：
SELECT TRIM('xy' FROM 'xyxboxyokxxyxy') ;

SUBSTRING函数获取指定位置处的子字符串substring(s,n,len)和mid（s,n,len）
从字符串s中返回长度为len ，起始位置为n的字符串，
【例6.45】使用SUBSTRING函数获取指定位置处的子字符串，SQL语句如下：
SELECT SUBSTRING('breakfast',5) AS col1, //从左向右第五个开始截取
SUBSTRING('breakfast',5,3) AS col2,
SUBSTRING('lunch', -3) AS col3,
SUBSTRING('lunch', -5, 3) AS col4;
备注：负数代表从右向左查 正数从左向右 无论正负，均截取右边的（以查的最后一个数为第一个截取的数，截取）
LOCATE，POSITION，INSTR函数查找字符串中指定子字符串的开始位置

【例6.47】使用LOCATE，POSITION，INSTR函数查找字符串中以指定 子字符串做开始位置，SQL语句如下：
SELECT LOCATE('ball','football'),POSITION('ball'IN 'football'),INSTR ('football', 'ball');

REVERSE函数反转字符串
【例6.48】使用REVERSE函数反转字符串，SQL语句如下：
SELECT REVERSE('abc');

ELT函数返回指定位置字符串elt（n,str1,str2,str3）n=1时返回str1
【例6.49】使用ELT函数返回指定位置字符串，SQL语句如下：
SELECT ELT(3,'1st','2nd','3rd'), ELT(3,'net','os');

FIELD函数返回指定字符串第一次出现的位置Field（s,s1,s2,s3）返回s在s1~sn中的位置
【例6.50】使用FIELD函数返回指定字符串第一次出现的位置，SQL语句如下：
SELECT FIELD('Hi', 'hihi', 'Hey', 'Hi', 'bas') as col1,
FIELD('Hi', 'Hey', 'Lo', 'Hilo',  'foo') as col2;

FIND_IN_SET()函数返回子字符串第一次在字符串列表中的位置 find_in_set(s,’s1,s2,...sn’) s在列表s1~sn中的位置
【例6.51】使用FIND_IN_SET()函数返回子字符串在字符串列表中的位置，SQL语句如下：
SELECT FIND_IN_SET('Hi','hihi,Hey,Hi,bas');

                                 日期函数

当前日期
【例6.53】使用日期函数获取系统当期日期，SQL语句如下：
SELECT CURDATE(),CURRENT_DATE(), CURDATE() + 0;
CURDATE(),和CURRENT_DATE()返回结果的格式的完全相同
当前时间
【例6.54】使用时间函数获取系统当期日期，SQL语句如下：
SELECT CURTIME(),CURRENT_TIME(),CURTIME() + 0;

【例6.55】使用日期时间函数获取当前系统日期和时间，SQL语句如下：
SELECT CURRENT_TIMESTAMP(),LOCALTIME(),NOW(),SYSDATE();

【例6.58】使用UTC_DATE()函数返回当前UTC日期值，SQL语句如下：
SELECT UTC_DATE(), UTC_DATE() + 0;

【例6.59】使用UTC_TIME()函数返回当前UTC时间值，SQL语句如下：
SELECT UTC_TIME(), UTC_TIME() + 0;

【例6.60】使用MONTH()函数返回指定日期中的月份，SQL语句如下：
SELECT MONTH('2011-02-13');

【例6.61】使用MONTHNAME()函数返回指定日期中的月份的名称，SQL语句如下：
SELECT MONTHNAME('2011-02-13');

【例6.62】使用DAYNAME()函数返回指定日期的工作日名称，SQL语句如下：
SELECT DAYNAME('2011-02-13');

【例6.63】使用DAYOFWEEK()函数返回日期对应的周索引，SQL语句如下：
SELECT DAYOFWEEK('2011-02-13');

【例6.64】使用WEEKDAY()函数返回日期对应的周索引，SQL语句如下：
SELECT WEEKDAY('2011-02-13 22:23:00'), WEEKDAY('2011-07-01');

【例6.65】使用WEEK()函数查询指定日期是一年中的第几周，SQL语句如下：
SELECT WEEK('2011-02-20'),WEEK('2011-02-20',0), WEEK('2011-02-20',1);

【例6.66】使用WEEKOFYEAR()查询指定日期是一年中的第几周，SQL语句如下：
SELECT WEEK('2011-02-20',3), WEEKOFYEAR('2011-02-20');

【例6.67】使用DAYOFYEAR()函数返回指定日期在一年中的位置，SQL语句如下：
SELECT DAYOFYEAR('2011-02-20');

【例6.68】使用DAYOFMONTH()函数返回指定日期在一个月中的位置，SQL语句如下：
SELECT DAYOFMONTH('2011-02-20');

【例6.69】使用YEAR()函数返回指定日期对应的年份，SQL语句如下：
SELECT YEAR('11-02-03'),YEAR('96-02-03');

【例6.70】使用QUARTER()函数返回指定日期对应的季度，SQL语句如下
SELECT QUARTER('11-04-01');

【例6.71】使用MINUTE()函数返回指定时间的分钟值，SQL语句如下：
SELECT MINUTE('11-02-03 10:10:03');

【例6.72】使用MINUTE()函数返回指定时间的秒值，SQL语句如下
SELECT SECOND('10:05:03');

【例6.73】使用EXTRACT函数提前日期或者时间值，SQL语句如下：
SELECT EXTRACT(YEAR FROM '2011-07-02') AS col1,
EXTRACT(YEAR_MONTH FROM '2011-07-12 01:02:03') AS col2,
EXTRACT(DAY_MINUTE FROM '2011-07-12 01:02:03') AS col3;
备注：extract（type from date）type [year,year_month,day_minute] 

计算时间和日期的函数
【例6.76】使用DATE_ADD()和ADDDATE()函数执行日期加操作，SQL语句如下：
SELECT DATE_ADD('2010-12-31 23:59:59', INTERVAL 3 day
) AS col1,
ADDDATE('2010-12-31 23:59:59', INTERVAL '10:1' MINUTE_SECOND
) AS col2,
DATE_ADD('2010-12-31 23:59:59', INTERVAL '1:1' MINUTE_SECOND) AS col3;
备注：计算只包括年月日，不包括时间（adddate(date,interval expr type)）
【例6.77】使用DATE_SUB和SUBDATE函数执行日期减操作，SQL语句如下：
SELECT DATE_SUB('2011-01-02', INTERVAL 31 DAY) AS col1,
SUBDATE('2011-01-02', INTERVAL 31 DAY) AS col2,
DATE_SUB('2011-01-01 00:01:00',INTERVAL '0 0:1:1' DAY_SECOND) AS col3;

【例6.78】使用ADDTIME进行时间加操作，SQL语句如下：
SELECT ADDTIME('2000-12-31 23:59:59','1:1:1'), ADDTIME(’02:02:02’,’02:00:00’);

【例6.79】使用SUBTIME()函数执行时间减操作，SQL语句如下：
SELECT SUBTIME('2000-12-31 23:59:59','1:1:1'), SUBTIME('02:02:02','02:00:00');

【例6.80】使用DATEDIFF()函数计算两个日期之间的间隔天数，SQL语句如下：
SELECT DATEDIFF('2010-12-31 23:59:59','2013-1-30  00:00:00') AS col1,
DATEDIFF('2010-11-30 23:59:59','2010-12-31') AS col2;

                  系统信息函数

查看当前MySQL版本号
例6.89】查看当前MySQL版本号，SQL语句如下：
SELECT VERSION();
【例6.90】查看当前用户的链接数，SQL语句如下：
SELECT CONNECTION_ID();

【例6.91】使用SHOW PROCESSLIST命令输出当前用户连接信息，SQL语句如下：
SHOW PROCESSLIST;

【例6.92】查看当前使用的数据库，SQL语句如下：
SELECT DATABASE(),SCHEMA();

【例6.93】获取当前登陆用户名称，SQL语句如下：
SELECT USER(), CURRENT_USER(), SYSTEM_USER();

【例6.94】使用CHARSET()函数返回字符串使用的字符集，SQL语句如下：
SELECT CHARSET('abc'), CHARSET(CONVERT('abc' USING latin1)), CHARSET(VERSION());

                              加密函数

【例6.97】使用PASSWORD函数加密密码，SQL语句如下：
SELECT PASSWORD('newpwd');

【例6.98】使用MD5函数加密字符串，SQL语句如下：
SELECT MD5 ('mypwd');

【例6.99】使用ENCODE加密字符串，SQL语句如下：
SELECT ENCODE('secret','cry'), LENGTH(ENCODE('secret','cry'));
备注：LENGTH（）函数是计算加密后的字符串长度
【例6.100】使用DECODE函数解密被ENCODE加密的字符串，SQL语句如下：
SELECT DECODE(ENCODE('secret','cry'),'cry');

